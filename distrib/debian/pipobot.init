#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Pipobot
# Description:       Bot for XMPP chatrooms
### END INIT INFO

# Author: Vincent Duvert <vincent@duvert.net>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Pipobot"
NAME=pipobot
USER=pipobot
CONFFILE=/etc/pipobot.conf.yml
DAEMON=/usr/bin/python
DAEMON_ARGS="-W ignore::DeprecationWarning /usr/bin/pipobot -b --pid /var/run/$NAME.pid"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

[ -x "$DAEMON" ] || exit 0
[ -x "/usr/bin/pipobot" ] || exit 0

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /lib/lsb/init-functions

do_start()
{
	if [ "$ENABLE_DAEMON" != 1 ]; then
        	log_progress_msg "(disabled, see /etc/default/${NAME})"
		return
	fi

	if [ ! -f "$CONFFILE" ]; then
		log_progress_msg "(not started, $CONFFILE not found - see /usr/share/doc/pipobot for sample configuration)"  
		return
	fi

	mkdir -p /var/run/pipobot
	chown pipobot:pipobot /var/run/pipobot
	
	start-stop-daemon --start --quiet --chuid $USER --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS
}

do_stop()
{
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" python -p "$PIDFILE" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
